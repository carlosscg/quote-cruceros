
service: quote-cruceros # NOTE: update this with your service name

provider:
  name: aws
  runtime: dotnetcore2.1
  region: us-east-1

package:
  individually: true

functions:
  hello:
    handler: CsharpHandlers::AwsDotnetCsharp.Handler::Hello
    package:
      artifact: bin/release/netcoreapp2.1/hello.zip
    events:
      - sns: SNSCruiseTopic
      # - sqs: cruiseProviderOne
      # - sqs:
      #     arn:
      #       Fn::GetAtt:
      #         - cruiseProviderOne
      #         - Arn


    # CruiseTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: Manejador de Crucero
    #     TopicName: cruiseManager
    #     Subscription:
    #       Protocol: SQS

    # cruiseProviderOne:
    #   Type: AWS::SNS::Subscription
    #   Properties:
    #     Protocol: SQS
    #     TopicArn: {"Ref":"CruiseTopic"}


resources:
  Resources:
    ## SNS Topic AND SQS Queues
    SNSCruiseTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Manejador de Crucero
        TopicName: ${self:service}-${self:provider.stage}-cruiseProviderOne

    cruiseProviderOne:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-cruiseProviderOne
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - cruiseProviderOneDLQ #Dead Letter Queue
            - Arn
          maxReceiveCount: 3

    cruiseProviderOneDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-cruiseProviderOne-DLQ

    cruiseProviderTwo:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-cruiseProviderTwo
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt
            - cruiseProviderTwoDLQ
            - Arn
          maxReceiveCount: 3
    
    cruiseProviderTwoDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-cruiseProviderTwo-DLQ

    ## queues policies
    snsTocruiseProviderOnePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - cruiseProviderOne
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSCruiseTopic
        Queues:
          - Ref: cruiseProviderOne
      
    snsTocruiseProviderTwoPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version:  "2012-10-17"
          Statement:
            - Sid: "allow-sns-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - cruiseProviderTwo
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                ArnEquals:
                  "aws:SourceArn": !Ref SNSCruiseTopic
        Queues:
            - Ref: cruiseProviderTwo
      
    cruiseProviderOneSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref SNSCruiseTopic
        Endpoint: !GetAtt
          - cruiseProviderOne
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'

    cruiseProviderTwoSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        TopicArn: !Ref SNSCruiseTopic
        Endpoint: !GetAtt
          - cruiseProviderOne
          - Arn
        Protocol: sqs
        RawMessageDelivery: 'true'
    
    # #SQS
    # cruiseProviderOne:
    #   Type: "AWS::SQS::Queue"
    #   Properties:
    #     QueueName: "cruiseProviderOne"

    # #SNS
    # CruiseTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: Manejador de Crucero
    #     TopicName: cruiseManager
    #     Subscription:
    #       Protocol: SQS
    #       Endpoint: { “Fn::Join” : [“”, [“arn:aws:sqs:us-east-1:“, { “Ref” : “AWS::AccountId” }, “:cruiseProviderOne” ] ] }
    #       #Endpoint: { “Fn::Join” : [“”, [“arn:aws:sqs:${self:provider.region}:“, { “Ref” : “AWS::AccountId” }, “:${self:resources.Resources.cruiseProviderOne.Properties.QueueName}” ] ] }

    # #Subscriptions:
    # # cruiseProviderOne:
    # #   Type: AWS::SNS::Subscription
    # #   Properties:
    # #     Protocol: SQS
    # #     TopicArn: {"Ref":"CruiseTopic"}

          

